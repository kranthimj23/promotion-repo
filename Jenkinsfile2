//This script implements the below logic:
//1) Checks if the release-note is updated based on the commit history.
//2) If the release-note is updated, then generate the config.

pipeline {

    agent any 
 
    environment {
        PYTHON_EXEC = 'python3.11'  // Or adjust to 'python' if needed
        GIT_CREDENTIALS_ID = credentials('jenkins-token')
    }

    options { skipDefaultCheckout() }

    stages {
        stage('Checkout with credentials') {
            steps {
                deleteDir()
                script {
                    withCredentials([string(credentialsId: 'jenkins-token', variable: 'GIT_TOKEN')]) {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${env.promotion_branch_x}"]],
                            userRemoteConfigs: [[
                                url: "${env.github_url}",
                                credentialsId: env.GIT_CREDENTIALS_ID
                            ]]
                        ])
                    }
                }
            }
        }

        stage('Check commits in release_note') {
            steps {
                script {
                    echo "Checking commits in folder: release_note"
                    def commits = sh(
                        script: "git log -n 10 --pretty=format:\"%H|%s\" -- helm-charts/${env.higher_env}-values/release_note/*.xlsx",
                        returnStdout: true
                    ).trim()
                    echo commits

                    def pattern = ~("Verified RN in:" + env.promotion_branch_x)

                    if (!binding.hasVariable('executePython')) {
                        executePython = false
                    }

                    commits.split('\n').each { line ->
                        def parts = line.split('\\|', 2)
                        if (parts.length == 2) {
                            def commitMsg = parts[1]
                            echo "Checking commit message: ${commitMsg}"
                            if ((commitMsg =~ pattern).matches()) {
                                echo "Found matching commit message: ${commitMsg}"
                                executePython = true
                            }
                        }
                    }
                }
            }
        }

        stage('Run Python scripts') {
            steps {
                script {
                    if (executePython) {
                        configFileProvider([
                            configFile(fileId: 'generate-config', targetLocation: 'generate-config.py'),
                            configFile(fileId: 'drift_promotion', targetLocation: 'drift_promotion.py')
                        ]) {
                            withCredentials([
                                string(credentialsId: 'jenkins-token', variable: 'GIT_TOKEN')
                            ]) {

                                //def result_infra = sh(
                                    //script: "${env.PYTHON_EXEC} drift_promotion.py ${env.github_url} ${env.promotion_branch_x} ${env.higher_env}",
                                  //  returnStdout: true
                                //).trim()
                                //echo result_infra

   //                             def targetFile = "${WORKSPACE}/helm-charts/${env.higher_env}-values/db-scripts/AQL/${env.higher_env}.txt"
//
     //                           if (fileExists(targetFile)) {
   //                                 echo "File exists: ${targetFile}"
//
                                    // âœ… Wait for downstream job and fail if it fails
                                    // def downstreamBuild = build job: 'ansible_sparse_execution_cd',
                                      //  parameters: [
                                         //   string(name: 'higher_env', value: env.higher_env),
                                           // string(name: 'promotion_branch_x', value: env.promotion_branch_x)
                                        //],
                                    //    wait: true,
                                  //      propagate: true
                                //} else {
                                  //  echo "File does NOT exist: ${targetFile}"
                                //}

                                def result = sh(
                                    script: "${env.PYTHON_EXEC} generate-config.py ${env.github_url} ${env.promotion_branch_x_1} ${env.promotion_branch_x} ${env.lower_env} ${env.higher_env}",
                                    returnStdout: true
                                ).trim()
                                echo result

                               // build job: 'deploy', wait: true
                               // parameters: [
                               //         string(name: 'env_namespace', value: env.higher_env),
                               //         string(name: 'latest_branch', value: env.promotion_branch_x),
                               //         string(name: 'repo_url', value: env.github_url)
                                      ]
                            }
                        }
                    } else {
                        echo "No matching commit messages found. Skipping Python script execution."
                        error("No matching commit message found.")
                    }
                }
            }
        }
    }
}
