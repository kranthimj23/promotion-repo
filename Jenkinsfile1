pipeline {
    agent any
    environment {
        PYTHON_EXEC = 'python3.12'  // Or adjust to 'python' if needed
        GIT_CREDENTIALS_ID = credentials('jenkins-token')
        PROMOTION_REPO_URL = 'https://github.com/kranthimj23/promotion-repo.git'  // Update this to your promotion repo URL
        SCRIPTS_REPO_URL = 'https://github.com/kranthimj23/zdt-manager-src.git'  // Update this to your scripts repo URL
        PROMOTION_BRANCH = 'main'  // Branch of promotion repo
        SCRIPTS_BRANCH = 'zdt-application'  // Branch of scripts repo
        SCRIPTS_FOLDER_APP = 'backend/app/cd/scripts'  // Folder structure in the scripts repo
        SCRIPTS_FOLDER_INFRA = 'backend/infra/cd/scripts'
    }

    stages {
        stage('Checkout Promotion Repo') {
            steps {
                script {
                    // Clone the promotion repo into the default workspace
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.PROMOTION_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: "${env.PROMOTION_REPO_URL}",
                            credentialsId: GIT_CREDENTIALS_ID
                        ]]
                    ])
                }
            }
        }

        stage('Checkout Scripts Repo') {
            steps {
                script {
                    // Create a temporary directory for scripts repo
                    def tempDir = 'tmp-scripts-repo'
                    sh "mkdir -p ${tempDir}"
                    
                    // Ensure the token is passed correctly as part of the Git URL
                    withCredentials([string(credentialsId: 'jenkins-token', variable: 'GIT_TOKEN')]) {
                        // Construct the Git URL using the token in place of the password
                        def gitUrl = "https://${env.GIT_TOKEN}@github.com/kranthimj23/zdt-manager-src.git"
                        
                        // Checkout the scripts repo into the temporary directory
                        dir(tempDir) {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "*/${env.SCRIPTS_BRANCH}"]],
                                userRemoteConfigs: [[
                                    url: gitUrl,  // Use the Git URL with embedded token
                                    credentialsId: GIT_CREDENTIALS_ID   // Still using the token ID in case it's needed for SCM handling
                                ]]
                            ])
                        }
                    }
                }
            }
        }

        stage('Fetch Branches') {
            steps {
                script {
                    def scriptPath = "tmp-scripts-repo/${env.SCRIPTS_FOLDER_APP}/merger.py"
                    def result = sh(
                        script: "${env.PYTHON_EXEC} ${scriptPath} ${env.lower_env} ${env.higher_env} ${env.github_url} ${env.new_version}",
                        returnStdout: true,
                    ).trim()

                    echo "Wait time of 5 secs"
                    sleep time: 5, unit: 'SECONDS'

                    def (x1, x2, low, high, isNew) = result.tokenize(',').collect { it?.trim() ?: '' }
                    env.X1_BRANCH = x1
                    env.X2_BRANCH = x2
                    env.LOWER_ENV = low
                    env.HIGHER_ENV = high
                    env.NEW_BRANCH = isNew?.toLowerCase() ?: 'false'
                }
            }
        }

        // stage('Delay-1') {
        //     steps {
        //         echo "Waiting for 5 seconds..."
        //         sleep time: 5, unit: 'SECONDS'
        //     }
        // }

        stage('Fetch the files into the new branch') {
            steps {
                script {
                    if (env.NEW_BRANCH?.toLowerCase() == 'true') {
                        echo "Triggering Push-Files-To-Branch job for new branch: ${env.X2_BRANCH}"
                        def scriptPath = "tmp-scripts-repo/${env.SCRIPTS_FOLDER_APP}/values-promotion.py"
                        sh "${env.PYTHON_EXEC} ${scriptPath} ${env.github_url} ${env.X2_BRANCH}"
                    } else {
                        echo "Skipping Push-Files-To-Branch because NEW_BRANCH is not 'true'. Got: '${env.NEW_BRANCH}'"
                    }
                    
                    echo "Waiting for 5 seconds..."
                    sleep time: 5, unit: 'SECONDS'
                }
            }
        }

        stage('Generate release-note for Application, DB and Infra') {
            steps {
                script {
                    if (env.X1_BRANCH && env.X2_BRANCH) {
                        def appReleaseNoteScript = "tmp-scripts-repo/${env.SCRIPTS_FOLDER_APP}/create-release-note.py"
                        def dbScript = "tmp-scripts-repo/${env.SCRIPTS_FOLDER_APP}/database_scripts_merger.py"
                        def infraReleaseNoteScript = "tmp-scripts-repo/${env.SCRIPTS_FOLDER_INFRA}/drift_lower_env.py"
                        
                        sh 'chmod +x ${dbScript}'
                        echo "Running create-release-note.py with parameters: ${env.X1_BRANCH} ${env.X2_BRANCH} ${env.LOWER_ENV} ${env.HIGHER_ENV} ${env.github_url} ${dbScript}"
                        sh "${env.PYTHON_EXEC} ${appReleaseNoteScript} ${env.X1_BRANCH} ${env.X2_BRANCH} ${env.LOWER_ENV} ${env.HIGHER_ENV} ${env.github_url} ${dbScript}"
                
                        sh "${env.PYTHON_EXEC} ${infraReleaseNoteScript} ${env.github_url} ${env.X1_BRANCH} ${env.X2_BRANCH} ${env.LOWER_ENV} ${env.HIGHER_ENV}"

                    } else {
                        echo "Skipping release-note generation because one of the branches is missing."
                    }
                }
            }
        }

        stage('Post Checkout Clean Up') {
            steps {
                script {
                    // Clean up: Delete the temporary directory after use
                    def tempDir = 'tmp-scripts-repo'
                    sh "rm -rf ${tempDir}"
                }
            }
        }
    }
}
